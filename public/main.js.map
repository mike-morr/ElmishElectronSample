{"version":3,"sources":["webpack:///webpack/bootstrap 38007b0b94a37502b13c?df1b","webpack:///src/Main/Main.fs","webpack:///external \"electron\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACvDQ;AAAU;AAAV;AAAA;AAIS;AAEb,mBAAe,+CAAf;AASA,wBAII;AAAA;AAAyB,KAJ7B;AAfI;AAAO;AA2Bf,iEAA2B;AAAA;AAAY,CAAvC;AAGA,6EAGI;AAAA,QAAG,6BAAH,EACI;AAAA;AAAmB;AAAA,CAJ3B;AAOA,oEAGI;AAAA,QAAG;AAAA;AAAA,OAAH,EACI;AAAA;AAAc;AAAA,CAJtB,E;;;;;;;;;;;;;;;;;;;AC9CA,qC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 284);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 38007b0b94a37502b13c","module SpOpsCenter\n\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.Import.Electron\n\nlet mutable mainWindow: BrowserWindow option = Option.None\nlet createWindow () =\n    let options = createEmpty<BrowserWindowOptions>\n    options.width <- Some 800.\n    options.height <- Some 600.\n\n    let window = electron.BrowserWindow.Create(options)\n\n    window.loadURL(\"file://\" + Node.Globals.__dirname + \"/../public/index.html\");\n\n    // #if DEBUG\n    // Node.Fs.fs.watchFile(Node.Globals.__dirname + \"/renderer.js\", fun _ ->\n    //     // window.webContents.reloadIgnoringCache()\n    // )\n    // #endif\n\n    // Emitted when the window is closed.\n    window.on(\"closed\", !!(fun () ->\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow <- Option.None\n    )) |> ignore\n\n    mainWindow <- Some window\n\n    \n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\nelectron.app.on(\"ready\", !!createWindow) |> ignore\n\n// Quit when all windows are closed.\nelectron.app.on(\"window-all-closed\", !!(fun () ->\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if Node.Globals.``process``.platform <> Node.Base.NodeJS.Darwin then\n        electron.app.quit()\n)) |> ignore\n\nelectron.app.on(\"activate\", !!(fun () ->\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if mainWindow.IsNone then\n        createWindow()\n)) |> ignore\n\n\n// WEBPACK FOOTER //\n// src/Main/Main.fs","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = 426\n// module chunks = 1"],"sourceRoot":""}